{
	"info": {
		"_postman_id": "59210f82-d258-4360-94ea-649f010953f5",
		"name": "ApplyHighestSecurityStandards",
		"description": "This collection contains the requests, which are needed to test the integration flow design guidelines for applying highest security standards. More details can be found in [SAP Help portal](https://help.sap.com/viewer/368c481cd6954bdfa5d0435479fd4eaf/Cloud/en-US/201fd43d4dab4bce9144ebfd9cdfbb20.html)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ApplySecurity_DisableDTDs",
			"item": [
				{
					"name": "DisableDTDs_GetXsrfToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbfd5519-d6d9-48ff-ac30-74be1eb71261",
								"exec": [
									"pm.globals.set(\"XSRFToken\",pm.response.headers.get(\"X-CSRF-Token\"));",
									"postman.setNextRequest(\"DisableDTDs\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "X-CSRF-token",
								"value": "fetch",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}/http/ApplySecurity/DisableDTDs",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"http",
								"ApplySecurity",
								"DisableDTDs"
							]
						},
						"description": "This request fetches an XSRF token, which is used in the following POST request."
					},
					"response": []
				},
				{
					"name": "DisableDTDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34b15a8f-2bbd-4aa8-98e8-14a945b67403",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"pm.test(\"Body contains 'DOCTYPE is disallowed'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"DOCTYPE is disallowed\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{XSRFToken}}",
								"type": "text"
							},
							{
								"key": "Context",
								"value": "DisableDTDs",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version='1.0' encoding='utf-8'?>\r\n<!DOCTYPE foo [\r\n<!ELEMENT foo ANY>\r\n<!ENTITY xxe SYSTEM \"file:///etc/passwd\">\r\n]>\r\n\r\n<Product>\r\n\t<ProductId>&xxe;</ProductId>\r\n</Product>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/http/ApplySecurity/DisableDTDs",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"http",
								"ApplySecurity",
								"DisableDTDs"
							]
						},
						"description": "This request triggers the Integration Flow. Its test checks, if the an http code 500 is returned and if the body contains a corresponding error message."
					},
					"response": []
				}
			],
			"description": "This folder contains the requests for integration flow \"ApplySecurity_DisableDTDs\". It shows how you can disable DTDs, if you parse XML content in a script step. Run the whole folder to execute the complete scenario, not only one request.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8afe1e00-705c-4398-a92e-8baff6d26bc8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "530702a9-27ad-43eb-9ef9-7322da38df0c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ApplySecurity_RemoveSensitiveContent",
			"item": [
				{
					"name": "RemoveSensitiveContent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a0393e3-876b-4214-bb61-e599c2800a37",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Accept is present\", function () {",
									"    pm.response.to.have.header(\"Accept\");",
									"});",
									"pm.test(\"Context is present\", function () {",
									"    pm.response.to.have.header(\"Context\");",
									"});",
									"pm.test(\"Authorization is not present\", function () {",
									"    pm.response.to.not.have.header(\"Authorization\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Context",
								"value": "RemoveSensitiveContent",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}/http/ApplySecurity/RemoveSensitiveContent",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"http",
								"ApplySecurity",
								"RemoveSensitiveContent"
							]
						},
						"description": "This request triggers the Integration Flow. Its test checks, if the sent headers without the authorization header are returned."
					},
					"response": []
				}
			],
			"description": "This folder contains the request for integration flow \"ApplySecurity_RemoveSensitiveContent\". It shows how you should remove sensitive content before you log it or forward it to an external system",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2a7d9ef1-4960-415f-a10d-df5fca7faa25",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "37929fbe-537e-4777-a647-162984bca70c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "EncodeDynamicParameters",
			"item": [
				{
					"name": "EncodeDynamicParameters_GetXsrfToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbfd5519-d6d9-48ff-ac30-74be1eb71261",
								"exec": [
									"pm.globals.set(\"XSRFToken\",pm.response.headers.get(\"X-CSRF-Token\"));",
									"postman.setNextRequest(\"EncodeDynamicParameters_OffensiveHeader\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "X-CSRF-token",
								"type": "text",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{host}}/http/ApplySecurity/EncodeDynamicParameters",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"http",
								"ApplySecurity",
								"EncodeDynamicParameters"
							]
						},
						"description": "This request fetches an XSRF token, which is used in the following POST request."
					},
					"response": []
				},
				{
					"name": "EncodeDynamicParameters_OffensiveHeader",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34b15a8f-2bbd-4aa8-98e8-14a945b67403",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"pm.test(\"Body contains 'An internal server error occured'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"An internal server error occured\");",
									"});",
									"postman.setNextRequest(\"EncodeDynamicParameters_CorrectHeader\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "X-CSRF-Token",
								"type": "text",
								"value": "{{XSRFToken}}"
							},
							{
								"key": "rating",
								"value": "5&$expand=Product",
								"type": "text"
							},
							{
								"key": "Context",
								"value": "EncodeDynamicParameters",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<Product>\r\n\t<ProductId>HT-1032</ProductId>\r\n</Product>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/http/ApplySecurity/EncodeDynamicParameters",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"http",
								"ApplySecurity",
								"EncodeDynamicParameters"
							]
						},
						"description": "This request triggers the Integration Flow with an offensive header. Its test checks, if the an http code 500 is returned and if the body contains a corresponding error message."
					},
					"response": []
				},
				{
					"name": "EncodeDynamicParameters_CorrectHeader",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34b15a8f-2bbd-4aa8-98e8-14a945b67403",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body contains '<ProductId>HT-1000</ProductId>'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<ProductId>HT-1000</ProductId>\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "X-CSRF-Token",
								"type": "text",
								"value": "{{XSRFToken}}"
							},
							{
								"key": "rating",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Context",
								"value": "EncodeDynamicParameters",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<Product>\r\n\t<ProductId>HT-1000</ProductId>\r\n</Product>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/http/ApplySecurity/EncodeDynamicParameters",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"http",
								"ApplySecurity",
								"EncodeDynamicParameters"
							]
						},
						"description": "This request triggers the Integration Flow with a correct header. Its test checks, if the an http code 200 is returned and if the body contains an entry with \"<ProductId>HT-1000</ProductId>\""
					},
					"response": []
				}
			],
			"description": "This folder contains the request for integration flow \"ApplySecurity_EncodeDynamicParameters\". It shows how you can encode untrusted content, which shall be used as a dynamic parameter in an OData call. There are two requests, one showing how an attacker can try to exploit the weakness, and another, which shows the intended usage. Run the whole folder to execute the complete scenario, not only one request.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72b1608a-8d8c-4e77-b850-07fae460eca2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42170f16-dd36-4e4f-b461-a1430de1aa54",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			},
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "158b7938-07e9-4109-9d19-f59cb72a7f9b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "71aed9b1-74a2-4e8a-afb5-022e69661a34",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}